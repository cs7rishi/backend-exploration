https://github.com/in28minutes/functional-programming-with-java/tree/master/src/programming
functional programming is a paradigm shift.

In structured formate we worry about How to do?
In functional Programming we worry about What to do ?


How to convert into stream, use .stream against List
How to put method reference, className::methodName, ex. FP01Functional::print

Why use .reduce instead of plain loop, because of parallelStream support, multicore

In Stream we have 2 type of Operation:
Intermediate Operations: These operations return a new STREAM and can be chained together.
    They are lazy, meaning they don't process the source until a terminal operation is invoked.

    filter: Filters elements based on a predicate.
    map: Transforms each element using a function.
    flatMap: Flattens a stream of streams into a single stream.
    distinct: Removes duplicate elements.
    sorted: Sorts the elements in natural order or using a comparator.
    peek: Performs an action on each element (primarily for debugging).
    limit: Limits the number of elements in the stream.
    skip: Skips the first n elements.
    mapToInt: Converts elements to an IntStream.
    mapToDouble: Converts elements to a DoubleStream.
    mapToLong: Converts elements to a LongStream.

Terminal Operations: These operations produce a non-stream result and terminate the stream processing.

    forEach: Performs an action for each element.
    collect: Collects elements into a collection or a summary result.
    reduce: Combines elements into a single result using a binary operator.
    count: Counts the number of elements in the stream.
    anyMatch: Checks if any elements match a given predicate.
    allMatch: Checks if all elements match a given predicate.
    noneMatch: Checks if no elements match a given predicate.
    findFirst: Returns the first element of the stream, if present.
    findAny: Returns any element of the stream, if present.
    toArray: Converts the stream into an array.
    min: Finds the minimum element according to a comparator.
    max: Finds the maximum element according to a comparator.
    sum: Computes the sum of the elements (for numerical streams).
    average: Computes the average of the elements (for numerical streams).


Functional Interface:
#Typically we pass data into a function, but we can pass a logic too
#Conceptually, a functional interface has exactly one abstract method
#Common Types of Functional Interface: Predicate, Consumer, and Function

#Java did'nt want to break the old system, as java is object as first class, therefore lambda
helps to pass the object of Interface type, to help implement functional programming

Common Functional Interfaces are:
Predicate<T>
Description: Represents a function that takes one argument and returns a boolean value. Often used for filtering or matching conditions.
Example: Predicate<String> isEmpty = s -> s.isEmpty();

2. Function<T, R>
Description: Represents a function that accepts one argument of type T and produces a result of type R. It is often used for transformations.
Example: Function<String, Integer> stringLength = s -> s.length();

3. Consumer<T>
Description: Represents an operation that accepts a single input argument and returns no result. It is typically used for operations that perform actions rather than returning a value.
Example: Consumer<String> print = s -> System.out.println(s);

4. Supplier<T>
Description: Represents a supplier of results. It does not take any arguments but returns a value of type T. Used for generating or providing values.
Example: Supplier<String> randomString = () -> UUID.randomUUID().toString();

5. UnaryOperator<T>
Description: Represents an operation on a single operand that produces a result of the same type. Itâ€™s a specialized form of Function.
Example: UnaryOperator<Integer> square = x -> x * x;

6. BinaryOperator<T>
Description: Represents an operation that takes two operands of the same type and produces a result of the same type. It is a specialized form of BiFunction.
Example: BinaryOperator<Integer> add = (a, b) -> a + b;

7. BiPredicate<T, U>
Description: Represents a function that takes two arguments and returns a boolean value. Useful for conditions that require two inputs.
Example: BiPredicate<String, String> equalsIgnoreCase = (a, b) -> a.equalsIgnoreCase(b);

8. BiFunction<T, U, R>
Description: Represents a function that accepts two arguments of types T and U and produces a result of type R. Useful for operations involving two inputs.
Example: BiFunction<Integer, Integer, Integer> multiply = (a, b) -> a * b;

9. ToIntFunction<T>
Description: Represents a function that takes an argument of type T and produces an int value.
Example: ToIntFunction<String> stringToLength = s -> s.length();

10. ToDoubleFunction<T>
Description: Represents a function that takes an argument of type T and produces a double value.
Example: ToDoubleFunction<Integer> intToDouble = i -> i.doubleValue();

11. ToLongFunction<T>
Description: Represents a function that takes an argument of type T and produces a long value.
Example: ToLongFunction<Integer> intToLong = i -> i.longValue();


